exports.id=729,exports.ids=[729],exports.modules={1524:(e,i,r)=>{r.r(i),r.d(i,{GkMcpProvider:()=>GkMcpProvider});var t=r(1398),o=r(2110),n=r(9252),s=r(5542),a=r(6623),c=r(3493),g=Object.defineProperty,p=Object.getOwnPropertyDescriptor,d=(e,i,r,t)=>{for(var o,n=t>1?void 0:t?p(i,r):i,s=e.length-1;s>=0;s--)(o=e[s])&&(n=(t?o(i,r,n):o(n))||n);return t&&n&&g(i,r,n),n};let l=/checking for updates.../i;let GkMcpProvider=class GkMcpProvider{constructor(e){this.container=e,this._disposable=t.Disposable.from(this.container.storage.onDidChange(e=>this.onStorageChanged(e)),t.lm.registerMcpServerDefinitionProvider("gitlens.gkMcpProvider",this))}_cliVersion;_disposable;_onDidChangeMcpServerDefinitions=new t.EventEmitter;_fireChangeDebounced=void 0;_getMcpConfigurationFromCLIPromise;get onDidChangeMcpServerDefinitions(){return this._onDidChangeMcpServerDefinitions.event}dispose(){this._disposable.dispose(),this._onDidChangeMcpServerDefinitions.dispose()}onStorageChanged(e){if(e.workspace||!e.keys.includes("gk:cli:install"))return;let i=this.container.storage.get("gk:cli:install");i?.status==="completed"&&(this._cliVersion!==i?.version&&(this._getMcpConfigurationFromCLIPromise=void 0),this._cliVersion=i?.version,this._fireChangeDebounced??=(0,s.s)(()=>{this._onDidChangeMcpServerDefinitions.fire()},500),this._fireChangeDebounced())}async provideMcpServerDefinitions(){let e=await this.getMcpConfigurationFromCLI();return null==e?[]:[new t.McpStdioServerDefinition(e.name,e.command,e.args,{},e.version)]}getMcpConfigurationFromCLI(){return this._getMcpConfigurationFromCLIPromise??=this.getMcpConfigurationFromCLICore(),this._getMcpConfigurationFromCLIPromise}async getMcpConfigurationFromCLICore(){let e=this.container.storage.get("gk:cli:install"),i=this.container.storage.get("gk:cli:path");if(e?.status!=="completed"||!i)return;let r=(0,c.Sl)(await (0,o.d5)());if(null==r)return;let n=await (0,c.XH)(["mcp","config",r,"--source=gitlens",`--scheme=${t.env.uriScheme}`],{cwd:i});n=n.replace(l,"").trim();try{let i=JSON.parse(n);return this.onRegistrationCompleted(e.version),{name:i.name,type:i.type,command:i.command,args:i.args,version:e.version}}catch(i){a.Vy.error(`Error getting MCP configuration: ${i}`),this.onRegistrationFailed("Error getting MCP configuration",void 0,e.version)}}onRegistrationCompleted(e){this.container.telemetry.enabled&&this.container.telemetry.setGlobalAttribute("gk.mcp.registrationCompleted",!0)}onRegistrationFailed(e,i,r){this.container.telemetry.enabled&&this.container.telemetry.sendEvent("mcp/registration/failed",{reason:e,"error.message":i,source:"gk-mcp-provider","cli.version":r})}};d([(0,n.Rm)({exit:!0})],GkMcpProvider.prototype,"provideMcpServerDefinitions",1),d([(0,n.Rm)()],GkMcpProvider.prototype,"getMcpConfigurationFromCLI",1),d([(0,n.Yz)()],GkMcpProvider.prototype,"getMcpConfigurationFromCLICore",1)}};